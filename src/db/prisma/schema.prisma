// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  encryptedPassword String
  nickname          String        @unique
  createdAt         DateTime      @default(now())
  grade             Grade         @default(GENERAL)
  role              Role?         @default(GENERAL)
  application       Application[]
  participate       Participate[]
  work              Work[]
  like              Like[]
  Feedback          Feedback[]
}

model Challenge {
  id              String       @id @default(uuid())
  title           String
  field           Field
  docType         DocType
  docUrl          String
  deadline        DateTime
  progress        Progress     @default(PROGRESS)
  participants    Int          @default(1)
  maxParticipants Int
  content         String?
  application     Application?
  participate Participate[]
  work        Work[]
}

model Application {
  id                  String            @id @default(uuid())
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  challenge           Challenge         @relation(fields: [challengeId], references: [id])
  challengeId         String            @unique
  status              ApplicationStatus @default(WAITING)
  appliedAt           DateTime          @default(now())
  invalidationComment String?
  invalidatedAt       DateTime?
}

model Participate {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  userId      String
  challengeId String

  @@unique([userId, challengeId])
}

model Work {
  id             String     @id @default(uuid())
  user           User       @relation(fields: [userId], references: [id])
  challenge      Challenge  @relation(fields: [challengeId], references: [id])
  description    String
  lastModifiedAt DateTime   @default(now())
  submittedAt    DateTime?   
  isSubmitted    Boolean    @default(false)
  userId         String
  challengeId    String
  likeCount      Int        @default(0)
  like           Like[]
  Feedback       Feedback[]
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)
  userId String
  workId String

  @@unique([userId, workId])
}

model Feedback {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  work      Work     @relation(fields: [workId], references: [id] ,onDelete:Cascade )
  content   String
  createdAt DateTime @default(now())
  userId    String
  workId    String
}

//바뀔예정 
enum Role {
  GENERAL
  EXPERT
  ADMIN
}

enum Grade {
  GENERAL
  EXPERT
}

enum Field {
  NEXTJS
  CAREER
  MODERNJS
  WEB
  API
}

enum DocType {
  BLOG
  OFFICIAL
}

enum ApplicationStatus {
  WAITING
  ACCEPTED
  REJECTED
  DELETED
}

enum Progress {
  PROGRESS
  COMPLETED
}
